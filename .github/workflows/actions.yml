name: Django CI/CD pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Wait for Postgres to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U postgres; do echo "Waiting for database..."; sleep 1; done

    - name: Apply migrations
      env:
        DATABASE_NAME: test_db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
      run: python src/manage.py migrate

    - name: Run flake8
      run: flake8
    
    - name: Check isort
      run: isort --check-only .

    - name: Run MyPy
      run: python -m mypy src

    - name: Run Xenon
      run: xenon --max-absolute B --max-modules B --max-average B src

    - name: Run tests
      env:
        DATABASE_NAME: test_db
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
      run: python src/manage.py test tests

#   docker:
#     needs: build
#     runs-on: ubuntu-latest

#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v2

#     - name: Set up Docker Buildx
#       uses: docker/setup-buildx-action@v2

#     - name: Cache Docker layers
#       uses: actions/cache@v3
#       with:
#         path: /tmp/.buildx-cache
#         key: ${{ runner.os }}-buildx-${{ github.sha }}
#         restore-keys: |
#           ${{ runner.os }}-buildx-

#     - name: Log in to Docker Hub
#       uses: docker/login-action@v2
#       with:
#         username: ${{ secrets.DOCKER_USERNAME }}
#         password: ${{ secrets.DOCKER_PASSWORD }}

#     - name: Build and push Docker image
#       uses: docker/build-push-action@v4
#       with:
#         context: .
#         file: ./Dockerfile
#         push: true
#         tags: ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:${{ github.sha }}

# deploy:
#   needs: docker
#   runs-on: ubuntu-latest

#   steps:
#   - name: Checkout code
#     uses: actions/checkout@v2

#   - name: Deploy to EC2
#     env:
#       SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
#       SSH_HOST: ${{ secrets.SSH_HOST }}
#       SSH_USER: ${{ secrets.SSH_USER }}
#     run: |
#       echo "${SSH_PRIVATE_KEY}" > private_key
#       chmod 600 private_key
#       ssh -i private_key $SSH_USER@$SSH_HOST << 'EOF'
#         docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:${{ github.sha }}
#         docker stop ${{ secrets.REPOSITORY_NAME }} || true
#         docker rm ${{ secrets.REPOSITORY_NAME }} || true
#         docker run -d --name ${{ secrets.REPOSITORY_NAME }} -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.REPOSITORY_NAME }}:${{ github.sha }}
# EOF